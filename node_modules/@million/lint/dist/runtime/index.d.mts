import * as react from 'react';
import { MutableRefObject } from 'react';

interface GlobalType {
    data: {
        [filename: string]: {
            source?: string;
            components: {
                [componentName: string]: Component;
            };
        };
    };
    cwd: string;
    React: any;
    sync: Array<{
        cwd: string;
        version: number;
        port: number;
    }>;
    embed: {
        render?: (outliers: Array<Outlier>) => void;
    };
    meta: {
        anyaVersion: string | null;
        version: string | null;
        framework: string | null;
    };
    network: {
        keys: Array<string>;
        requests: Array<NetworkRequest>;
    };
    invalidate: boolean;
    active: boolean;
    _lookup: {
        component: WeakMap<FunctionReference, string>;
        hash: Map<number, {
            filename: string;
            componentName: string;
            reference: FunctionReference;
            prev: Array<number>;
            setPrev: (value: any) => void;
        }>;
    };
}
interface NetworkRequest {
    filename: string;
    strings: Array<string>;
    loc: SourceLocation;
    totalTime: number;
}
interface External {
    kind: string;
    loc: SourceLocation;
    jsx: boolean;
}
interface Outlier {
    componentName: string;
    filename: string;
    totalTime: number;
    selfTime: number;
    count: number;
    loc: SourceLocation;
    instances: number;
}
type All = Outlier;
interface Change {
    unstable: boolean;
    count: number;
    prev: string;
    next: string;
    type: string;
}
interface DepChange extends Change {
    index: number;
}
interface CallChange extends Change {
    caller: string;
}
interface PropChange extends Change {
    name: string;
}
interface Render {
    kind: string;
    loc: SourceLocation;
    selfTime: number;
    totalTime: number;
    count: number;
    filename: string | null;
    owner: string | null;
    self: string | null;
    changes: Array<Change>;
}
interface JSXRender extends Render {
    kind: "mount" | "unmount" | "nested-update" | "update";
    _loc: SourceLocation;
}
interface ValueRender extends Render {
    kind: "state" | "value";
}
interface CallRender extends Render {
    kind: "call";
    changes: Array<CallChange>;
}
interface PropsRender extends Render {
    kind: "props";
    changes: Array<PropChange>;
}
interface DepsRender extends Render {
    kind: "deps";
    changes: Array<DepChange>;
    locs: Array<SourceLocation>;
}
interface Component {
    componentName: string;
    loc: SourceLocation;
    externals: Record<string, External>;
    renders: Array<Render>;
    children: {
        [componentName: string]: string;
    };
    parents: {
        [componentName: string]: string;
    };
    filename?: string;
    isLazyLoadable?: boolean;
    instances: number;
    get count(): number;
}
type Sync = Array<{
    cwd: string;
    port: number;
    version: number;
}>;
interface Size {
    size: number;
    filename: string;
    loc: SourceLocation;
}
interface StateManagerUsage {
    filename: string;
    type: string;
    loc: SourceLocation;
}
interface AnyaRouteBody {
    runtime?: {
        version: number;
        data: GlobalType["data"];
        outliers: Array<Outlier>;
        all: Array<Outlier>;
        meta: GlobalType["meta"];
    };
    network?: {
        outliers: Array<NetworkRequest>;
        all: Array<NetworkRequest>;
    };
    bundle?: {
        outliers: Record<string, Array<Size>>;
        all: Record<string, Array<Size>>;
    };
    stateManagers?: Record<string, Array<StateManagerUsage>>;
}
type SourceLocation = [number, number, number, number];
type FunctionReference = Function;
declare const isJSXRender: (render: Render) => render is JSXRender;
declare const isValueRender: (render: Render) => render is ValueRender;
declare const isCallRender: (render: Render) => render is CallRender;
declare const isPropsRender: (render: Render) => render is PropsRender;
declare const isDepsRender: (render: Render) => render is DepsRender;

declare const invalidate: () => Promise<void>;
declare const resync: () => Promise<void>;

declare const captureClassSetState: (hash: number, setState: (state: any) => void, loc: SourceLocation, index: number) => (this: any, ...args: any) => any;

declare const captureDeps: <T>(hash: number, deps: T, loc: SourceLocation, locs: Array<SourceLocation>, index: number) => T;

declare const captureFunctionCall: <T>(hash: number, value: T, loc: SourceLocation, index: number, caller: string) => T;
declare const captureFunctionDef: <T>(hash: number, fn: T, loc: SourceLocation, index: number) => T;

declare const captureJSX: (hash: number, children: JSX.Element, loc: SourceLocation, relevantLoc: SourceLocation, index: number) => JSX.Element;

declare const captureProps: <T extends Record<string, unknown> | null>(hash: number, props: T, loc: SourceLocation, index: number) => (T & object) | (T & null);

declare const captureRef: <T extends MutableRefObject<unknown>>(hash: number, ref: T, loc: SourceLocation, index: number) => T;

declare const captureReducer: <T extends [unknown, react.Dispatch<unknown>] | [any, react.Dispatch<any>]>(hash: number, value: T, loc: SourceLocation, index: number) => T;

declare const captureHTTP: <T>(hash: number, value: T, loc: SourceLocation, strings: Array<string>, index: number) => T;

declare const useMount: (filename: string, componentName: string) => void;

declare const registerFile: (filename: string, cwd: string, React: any, framework: string) => void;
declare const registerComponent: (filename: string, componentName: string, hash: number, reference: FunctionReference, externals: Record<string, External>, loc: SourceLocation, prevArraySize: number) => void;

declare const reportOutliers: () => void;

export { type All, type AnyaRouteBody, type CallChange, type CallRender, type Change, type Component, type DepChange, type DepsRender, type External, type FunctionReference, type GlobalType, type JSXRender, type NetworkRequest, type Outlier, type PropChange, type PropsRender, type Render, type Size, type SourceLocation, type StateManagerUsage, type Sync, type ValueRender, captureClassSetState, captureDeps, captureFunctionCall, captureFunctionDef, captureHTTP, captureJSX, captureProps, captureReducer, captureRef, invalidate, isCallRender, isDepsRender, isJSXRender, isPropsRender, isValueRender, registerComponent, registerFile, reportOutliers, resync, useMount };
